name: 'ROOT Docs'

on:
  # https://github.com/root-project/root/pull/12112#issuecomment-1411004278
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'doc/**'
      - 'documentation/**'

  # Allows nightly builds to trigger one run for each branch easily, by
  # providing the relevant branch as "default" value here:
  workflow_call:
    inputs:
      head_ref:
        type: string
        default: master
      base_ref:
        type: string
        default: master
      ref_name:
        type: string
        default: master

  workflow_dispatch:
    inputs:
      head_ref:
        description: rebase from ...
        type: string
        required: true
        default: master
      base_ref:
        description: ... to ... (can have same value)
        type: string
        required: true
        default: master
      incremental:
        description: 'Do incremental build'
        type: boolean
        required: true
        default: true
      binaries:
        description: Create binary packages and upload them as artifacts
        type: boolean
        required: true
        default: false
      buildtype:
        description: The CMAKE_BUILD_TYPE to use for non-Windows.
        type: choice
        options:
        - Debug
        - RelWithDebInfo
        - Release
        - MinSizeRel
        default: Debug
        required: true
      docu_input: # TODO: overwrite makeinput.sh with these args
        description: Folders to build documentation for. All folders are built if empty.
        type: string
        default: ""
        required: false

# TODO: it would be nice to use some global var for the platform, this doesn't work though :(
env:
  PLATFORM: alma9
  DOC_DIR: rootdoc
  DOC_LOCATION: /github/home
  S3_BUCKET_NAME: root
  PR_NUMBER: ${{ github.event.pull_request.number }}
  SHOULD_DEPLOY: "true"
  #SHOULD_DEPLOY: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}     

jobs:
  build-docs:
    runs-on:
      - self-hosted
      - linux
      - x64

    permissions:
      contents: read

    container:
      image: registry.cern.ch/root-ci/alma9:buildready # ALSO UPDATE BELOW!
      options: '--security-opt label=disable --rm' # ALSO UPDATE BELOW!
      env:
        OS_APPLICATION_CREDENTIAL_ID: '7f5b64a265244623a3a933308569bdba'
        OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}
        OS_AUTH_TYPE: 'v3applicationcredential'
        OS_AUTH_URL: 'https://keystone.cern.ch/v3'
        OS_IDENTITY_API_VERSION: 3
        OS_INTERFACE: 'public'
        OS_REGION_NAME: 'cern'
        PYTHONUNBUFFERED: true

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python Virtual Env
      # if the `if` expr is false, `if` still has exit code 0.
      # if the `if` block is entered, the block's exit code becomes the exit
      # code of the `if`.
      run: 'if [ -d /py-venv/ROOT-CI/bin/ ]; then . /py-venv/ROOT-CI/bin/activate && echo PATH=$PATH >> $GITHUB_ENV; fi'

    # TODO: install latest versions in image on root-ci-images
    - name: Install Doxygen 1.10.0
      run : |
        mkdir -p ${{ github.workspace }}/doxygen
        curl -L https://github.com/doxygen/doxygen/releases/download/Release_1_10_0/doxygen-1.10.0.linux.bin.tar.gz | tar -xz -C ${{ github.workspace }}/doxygen/ --strip-components=1
        echo PATH=$PATH:${{ github.workspace }}/doxygen/bin >> $GITHUB_ENV

    - name: Install qhelpgenerator
      run : |
        dnf update -y && dnf install -y sudo
        sudo dnf update -y
        sudo dnf upgrade -y
        sudo dnf install -y qt5-qhelpgenerator

    - name: Apply option overrides
      if: ${{ github.event_name != 'schedule' }}
      env:
        OVERRIDES: "testing=off roottest=off minimal=on" # can be removed if this workflow is merged with root-ci.yml
        CONFIGFILE: '.github/workflows/root-ci-config/buildconfig/alma9.txt'
      shell: bash
      run: |
        set -x
        echo '' >> "$CONFIGFILE"
        for ENTRY in $OVERRIDES; do
            KEY=$( echo "$ENTRY" | cut -d '=' -f 1 )
            # Add entry to file if not exists, otherwise replace
            if grep -q "$KEY=" "$CONFIGFILE"; then
                sed -i "s/$KEY=.*\$/$ENTRY/" "$CONFIGFILE"
            else
                echo "$ENTRY" >> "$CONFIGFILE"
            fi
        done
        cat "$CONFIGFILE" || true

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"


    - name: Print debug info
      run:  'printf "%s@%s\\n" "$(whoami)" "$(hostname)";
              ls -la
            '

    - name: Pull Request Build
      if: github.event_name == 'pull_request'
      env:
        INCREMENTAL: ${{ !contains(github.event.pull_request.labels.*.name, 'clean build') }}
        GITHUB_PR_ORIGIN: ${{ github.event.pull_request.head.repo.clone_url }}
      run: ".github/workflows/root-ci-config/build_root.py
                  --buildtype       Release
                  --platform        alma9
                  --image           registry.cern.ch/root-ci/alma9:buildready
                  --dockeropts      '--security-opt label=disable --rm'
                  --incremental     $INCREMENTAL
                  --base_ref        ${{ github.base_ref }}
                  --sha             ${{ github.sha }}
                  --pull_repository ${{ github.event.pull_request.head.repo.clone_url }}
                  --head_ref        refs/pull/${{ github.event.pull_request.number }}/head:${{ github.event.pull_request.head.ref }}
                  --head_sha        ${{ github.event.pull_request.head.sha }}
                  --repository      ${{ github.server_url }}/${{ github.repository }}
            "

    # - name: Nightly build
    #   if:   github.event_name == 'schedule'
    #   run: ".github/workflows/root-ci-config/build_root.py
    #               --buildtype      Release
    #               --platform       alma9
    #               --incremental    false
    #               --binaries       false
    #               --base_ref       ${{ inputs.ref_name }}
    #               --repository     ${{ github.server_url }}/${{ github.repository }}
    #         "

    - name: Workflow dispatch
      if:   github.event_name == 'workflow_dispatch'
      run: ".github/workflows/root-ci-config/build_root.py
                  --buildtype      Release
                  --platform       alma9
                  --incremental    ${{ inputs.incremental }}
                  --base_ref       ${{ inputs.base_ref }}
                  --head_ref       ${{ inputs.head_ref }}
                  --binaries       ${{ inputs.binaries }}
                  --repository     ${{ github.server_url }}/${{ github.repository }}
           "

    - name: Run Doxygen
      shell: bash
      run: |
        source ${DOC_LOCATION}/ROOT-CI/build/bin/thisroot.sh
        export DOXYGEN_OUTPUT_DIRECTORY=${DOC_LOCATION}/${DOC_DIR}_TMP

        cd ${DOC_LOCATION}/ROOT-CI/src/documentation/doxygen
        make -j$(nproc)

        if [ -d ${DOC_LOCATION}/${DOC_DIR}/html ]; then
            rm -rf ${DOC_LOCATION}/${DOC_DIR}/html
        fi

        mv -f ${DOXYGEN_OUTPUT_DIRECTORY}/html ${DOC_LOCATION}/${DOC_DIR}
        if [ -d ${DOXYGEN_OUTPUT_DIRECTORY}/notebooks ]; then
          mv ${DOXYGEN_OUTPUT_DIRECTORY}/notebooks ${DOC_LOCATION}/${DOC_DIR}/notebooks
        fi

    # - name: Create documentation archives
    #   working-directory: ${{ env.DOC_LOCATION }}
    #   shell: bash
    #   run: |
    #     tarnamegz=${DOC_DIR}.tar.gz
    #     tar zcf $tarnamegz ${DOC_DIR}
    #     tarnamexz1=${DOC_DIR}.tar
    #     tar cf $tarnamexz1 ${DOC_DIR}
    #     xz -T5 -f $tarnamexz1
    #     ls -lh ${DOC_LOCATION} # Debug statement to list files and verify tarball creation

    # Upload to GitHub as an artifact (optional)
    # - name: Upload tar.gz
    #   if:   ${{ !cancelled() }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: rootdoc.tar.gz
    #     path: ${{env.DOC_LOCATION}}/${{env.DOC_DIR}}.tar.gz

    # - name: Upload tar.xz
    #   if:   ${{ !cancelled() }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: rootdoc.tar.xz
    #     path: ${{env.DOC_LOCATION}}/${{env.DOC_DIR}}.tar.xz

    - name: Upload root_doc
      if:   ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: rootdoc
        path: ${{env.DOC_LOCATION}}/${{env.DOC_DIR}}

    # Upload to Amazon S3
    # - name: Checkout code
    #   uses: actions/checkout@v2

    # - name: Set up AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: eu-west-1

    #    # Do I need this step?
    # - name: Install AWS CLI
    #   run: |
    #     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    #     unzip awscliv2.zip
    #     sudo ./aws/install

    # - name: Upload root_doc
    #   if: ${{ env.SHOULD_DEPLOY == 'true' }}
    #   run: |
    #     DEST="s3://root/${PR_NUMBER:-}" # if PR, upload in s3://root/<prnumber>
    #     aws --endpoint-url https://s3.cern.ch s3 sync --delete build/${PR_NUMBER:-} ${DEST}
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_REGION: "eu-west-1"

  upload-docs:
    name: Jekyll Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Build with Jekyll
        # Outputs to the './build' directory by default
        run: bundle exec jekyll build "${PR_NUMBER:+--baseurl=${PR_NUMBER}/}" --destination "build/${PR_NUMBER:-}"
        env:
          JEKYLL_ENV: production

      - name: Only allow links to root.cern, never root.cern.ch
        run: |
          grep -n -R 'root\.cern\.ch' build || exit 0  # grep returns non-zero if no match is found
          N_WRONG_LINKS=$(grep -R 'root\.cern\.ch' build | wc -l)
          echo -e "\nFound $N_WRONG_LINKS links to root.cern.ch. Please change them to link to root.cern (no '.ch') instead."
          exit 1
      - name: Only allow links to ref guide for master (except in release notes and when linking to release notes)
        run: |
          # grep for https://root.cern/doc/(!"master" && !"vXXX/release-notes.html"). If something is found, error out.
          grep --exclude="index.html" --exclude-dir="releases" --exclude-dir="reference" --exclude-dir="all_releases" --exclude-dir="feed" -n -R -P 'https:\/\/root\.cern\/doc\/(?!(master|v[0-9]{3}\/release-notes\.html))' build \
             || exit 0 # grep returns non-zero if no match is found
          echo -e "\nFound links to /doc/NOT_MASTER (see above). Please change them to link to /doc/master."
          exit 1
      - name: Wait for other deployments
        # wait for other workflows that are deploying the website to finish, (not 100% foolproof, see #240)
        if: ${{ env.SHOULD_DEPLOY == 'true' && github.event_name != 'pull_request' }}
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync to S3
        if: ${{ env.SHOULD_DEPLOY == 'true' }}
        run: |
          DEST="s3://root/${PR_NUMBER:-}" # if PR, upload in s3://root/<prnumber>
          aws --endpoint-url https://s3.cern.ch s3 sync --delete build/${PR_NUMBER:-} ${DEST}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "eu-west-1"